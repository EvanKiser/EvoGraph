Script started on Tue 11 Dec 2018 06:51:43 PM CST
[?1034hbash-4.2$ ls
evograph      executionScripts	     README.md
evograph.pdf  executionSlashdot.txt  timingAndExecution.txt
bash-4.2$ cd evograoh[K[Kph
bash-4.2$ ls
analysis  data	images	src
bash-4.2$ cd src
bash-4.2$ ls
evographParallel.py  evograph.py  sandbox
bash-4.2$ put[K[Kython.[K evographParallel.py
Running evograph.py

After every single execution, for repeatability, the fileToUpscale that was upscaled 
will be returned to its original state automatically. This is due to the nature
of the memory-efficient edge attachment, wherein the edges are read from the 
graph, and subsequently, new edges being attached are added directly back into that fileToUpscale


Using multiprocessing, we will be running various upscaling tests on sf=1.txt.
These include upscaling to k=2,k=3,k=4 using multiple threads. You will notice that many of these are out 
of order when printing out. However, all of the values are correct. Since EvoGraph is using I/O for 
finding new edges, any of the threads can read and write the edges at any time. 
This means that, due to the possibility of deep recursion, some of the threads reading later edges will be 
written into sf=1.txt before the earlier writes are finished 


Original graph (Gsf=1) is: 
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5

----------------------------------------

Upscaling sf=1.txt graph from k=1 to k=2: 
3 thread(s)	Execution time: 0:00:00.008236
The graph generated by this process below: 
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5
0	7	#e6
6	2	#e7
2	8	#e8
7	4	#e9
3	9	#e10
5	1	#e11

Compare the above upscale to the expected values in k=2 graph (../data/sf=2.txt) printed below:
(Tabs in this fileToUpscale used to more easily delineate between the new edges inserted at this level)
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5
0	7		#e6
6	2		#e7
2	8		#e8
7	4		#e9
3	9		#e10
5	1		#e11


----------------------------------------

Upscaling sf=1.txt graph from k=1 to k=3: 
3 thread(s)	Execution time: 0:00:00.015493
The graph generated by this process below: 
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5
0	7	#e6
6	2	#e7
2	8	#e8
7	4	#e9
3	9	#e10
5	1	#e11
6	12	#e12
11	2	#e13
7	14	#e14
12	4	#e15
5	11	#e16
10	7	#e17

Compare the above upscale to the expected values in k=3 graph (../data/sf=3.txt) printed below:
(Tabs in this fileToUpscale used to more easily delineate between the new edges inserted at this level)
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5
0	7	#e6
6	2	#e7
2	8	#e8
7	4	#e9
3	9	#e10
5	1	#e11
6	12		#e12
11	2		#e13
7	14		#e14
12	4		#e15
5	11		#e16
10	7		#e17

----------------------------------------

Upscaling sf=1.txt graph from k=1 to k=4: 
12 thread(s)	Execution time: 0:00:00.016979
The graph generated by this process below: 
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5
0	7	#e6
2	8	#e8
6	2	#e7
7	4	#e9
3	9	#e10
5	1	#e11
6	12	#e12
11	2	#e13
7	14	#e14
12	4	#e15
17	4	#e21
5	11	#e16
0	17	#e18
10	7	#e17
17	8	#e19
5	16	#e22
15	1	#e23
12	19	#e20

Compare the above upscale to the expected values in k=4 graph (../data/sf=4.txt) printed below:
(Tabs in this fileToUpscale used to more easily delineate between the new edges inserted at this level)
0	1	#e0
0	2	#e1
1	2	#e2
2	3	#e3
2	4	#e4
3	4	#e5
0	7	#e6
6	2	#e7
2	8	#e8
7	4	#e9
3	9	#e10
5	1	#e11
6	12	#e12
11	2	#e13
7	14	#e14
12	4	#e15
5	11	#e16
10	7	#e17
0	17		#e18
17	8		#e19
12	19		#e20
17	4		#e21
5	16		#e22
15	1		#e23
----------------------------------------



Now running timing experiments on various datasets
----------------------------------------
Now running timing tests on k=2 upscale
----------------------------------------


Running parallel upscale on ../data/sf=1.txt to test time complexity of a 2x upscale.
1 thread(s)	Execution time: 0:00:00.013126
1 thread(s)	Execution time: 0:00:00.013758
1 thread(s)	Execution time: 0:00:00.013720
1 thread(s)	Execution time: 0:00:00.014775
1 thread(s)	Execution time: 0:00:00.014181
Total execution time:   0.06956 seconds for 5 iteration(s)
Average execution time: 0.013912

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 2x upscale.
2 thread(s)	Execution time: 0:00:00.009188
2 thread(s)	Execution time: 0:00:00.008839
2 thread(s)	Execution time: 0:00:00.008898
2 thread(s)	Execution time: 0:00:00.009093
2 thread(s)	Execution time: 0:00:00.009589
Total execution time:   0.045607 seconds for 5 iteration(s)
Average execution time: 0.0091214

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 2x upscale.
4 thread(s)	Execution time: 0:00:00.008642
4 thread(s)	Execution time: 0:00:00.008253
4 thread(s)	Execution time: 0:00:00.009166
4 thread(s)	Execution time: 0:00:00.008513
4 thread(s)	Execution time: 0:00:00.008185
Total execution time:   0.042759 seconds for 5 iteration(s)
Average execution time: 0.0085518

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 2x upscale.
8 thread(s)	Execution time: 0:00:00.007879
8 thread(s)	Execution time: 0:00:00.007756
8 thread(s)	Execution time: 0:00:00.008115
8 thread(s)	Execution time: 0:00:00.008050
8 thread(s)	Execution time: 0:00:00.008063
Total execution time:   0.039863 seconds for 5 iteration(s)
Average execution time: 0.0079726

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 2x upscale.
100 thread(s)	Execution time: 0:00:00.009653
100 thread(s)	Execution time: 0:00:00.008256
100 thread(s)	Execution time: 0:00:00.008729
100 thread(s)	Execution time: 0:00:00.008570
100 thread(s)	Execution time: 0:00:00.008099
Total execution time:   0.043307 seconds for 5 iteration(s)
Average execution time: 0.0086614

----------------------------------------
Now running timing tests on k=3 upscale
----------------------------------------


Running parallel upscale on ../data/sf=1.txt to test time complexity of a 3x upscale.
1 thread(s)	Execution time: 0:00:00.047004
1 thread(s)	Execution time: 0:00:00.033651
1 thread(s)	Execution time: 0:00:00.032727
1 thread(s)	Execution time: 0:00:00.031214
1 thread(s)	Execution time: 0:00:00.031581
Total execution time:   0.176177 seconds for 5 iteration(s)
Average execution time: 0.0352354

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 3x upscale.
2 thread(s)	Execution time: 0:00:00.019788
2 thread(s)	Execution time: 0:00:00.020590
2 thread(s)	Execution time: 0:00:00.031694
2 thread(s)	Execution time: 0:00:00.022006
2 thread(s)	Execution time: 0:00:00.021826
Total execution time:   0.115904 seconds for 5 iteration(s)
Average execution time: 0.0231808

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 3x upscale.
4 thread(s)	Execution time: 0:00:00.023720
4 thread(s)	Execution time: 0:00:00.015669
4 thread(s)	Execution time: 0:00:00.016945
4 thread(s)	Execution time: 0:00:00.016372
4 thread(s)	Execution time: 0:00:00.015763
Total execution time:   0.088469 seconds for 5 iteration(s)
Average execution time: 0.0176938

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 3x upscale.
8 thread(s)	Execution time: 0:00:00.015853
8 thread(s)	Execution time: 0:00:00.017602
8 thread(s)	Execution time: 0:00:00.016105
8 thread(s)	Execution time: 0:00:00.015170
8 thread(s)	Execution time: 0:00:00.016656
Total execution time:   0.081386 seconds for 5 iteration(s)
Average execution time: 0.0162772

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 3x upscale.
100 thread(s)	Execution time: 0:00:00.015930
100 thread(s)	Execution time: 0:00:00.015719
100 thread(s)	Execution time: 0:00:00.018520
100 thread(s)	Execution time: 0:00:00.016211
100 thread(s)	Execution time: 0:00:00.016245
Total execution time:   0.082625 seconds for 5 iteration(s)
Average execution time: 0.016525

----------------------------------------
Now running timing tests on k=128 upscale
----------------------------------------


Running parallel upscale on ../data/sf=1.txt to test time complexity of a 128x upscale.
1 thread(s)	Execution time: 0:00:03.315850
1 thread(s)	Execution time: 0:00:04.884264
1 thread(s)	Execution time: 0:00:06.460242
1 thread(s)	Execution time: 0:00:08.444371
1 thread(s)	Execution time: 0:00:10.133608
Total execution time:   33.238335 seconds for 5 iteration(s)
Average execution time: 6.647667

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 128x upscale.
2 thread(s)	Execution time: 0:00:06.115156
2 thread(s)	Execution time: 0:00:07.164117
2 thread(s)	Execution time: 0:00:08.114100
2 thread(s)	Execution time: 0:00:08.630895
2 thread(s)	Execution time: 0:00:09.016287
Total execution time:   39.040555 seconds for 5 iteration(s)
Average execution time: 7.808111

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 128x upscale.
4 thread(s)	Execution time: 0:00:04.940104
4 thread(s)	Execution time: 0:00:05.245695
4 thread(s)	Execution time: 0:00:05.117186
4 thread(s)	Execution time: 0:00:05.748685
4 thread(s)	Execution time: 0:00:05.149811
Total execution time:   26.201481 seconds for 5 iteration(s)
Average execution time: 5.2402962

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 128x upscale.
8 thread(s)	Execution time: 0:00:03.463359
8 thread(s)	Execution time: 0:00:03.299769
8 thread(s)	Execution time: 0:00:03.148142
8 thread(s)	Execution time: 0:00:03.491996
8 thread(s)	Execution time: 0:00:03.997974
Total execution time:   17.40124 seconds for 5 iteration(s)
Average execution time: 3.480248

Running parallel upscale on ../data/sf=1.txt to test time complexity of a 128x upscale.
100 thread(s)	Execution time: 0:00:02.789724
100 thread(s)	Execution time: 0:00:02.923576
100 thread(s)	Execution time: 0:00:03.143843
100 thread(s)	Execution time: 0:00:03.190043
100 thread(s)	Execution time: 0:00:03.168425
Total execution time:   15.215611 seconds for 5 iteration(s)
Average execution time: 3.0431222

----------------------------------------
Now running timing tests on k=2 upscale
----------------------------------------


Running parallel upscale on ../data/toy.txt to test time complexity of a 2x upscale.
100 thread(s)	Execution time: 0:00:00.041857
Total execution time:   0.041857 seconds for 1 iteration(s)
Average execution time: 0.041857

----------------------------------------
Now running timing tests on k=3 upscale
----------------------------------------


Running parallel upscale on ../data/toy.txt to test time complexity of a 3x upscale.
100 thread(s)	Execution time: 0:00:00.052536
Total execution time:   0.052536 seconds for 1 iteration(s)
Average execution time: 0.052536

Finished.
bash-4.2$ exit
exit

Script done on Tue 11 Dec 2018 06:57:25 PM CST
